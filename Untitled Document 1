public function store(Request $request)
{
    $post = new Post;
    $post->title = $request->title;
    $post->description = $request->description;

    if ($request->hasFile('image')) {
        $image = $request->file('image');
        $filename = time() . '_' . $image->getClientOriginalName();
        $path = $image->storeAs('public/images', $filename);
        $post->image = 'storage/images/' . $filename;
    }

    $post->save();

    return redirect()->route('posts.index');
}



public function store(Request $request)
{
    $validatedData = $request->validate([
        'title' => 'required',
        'content' => 'required',
        'image' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048'
    ]);

    $post = new Post;
    $post->title = $request->title;
    $post->content = $request->content;

    if ($request->hasFile('image')) {
        $image = $request->file('image');
        $filename = time() . '.' . $image->getClientOriginalExtension();
        $path = public_path('images/' . $filename);
        Image::make($image->getRealPath())->resize(300, 300)->save($path);
        $post->image = 'images/' . $filename;
    }

    $post->save();

    return redirect()->route('your_route.index')
        ->with('success', 'Post created successfully');
}





public function store(Request $request)
{
    // Validate request data
    $validated = $request->validate([
        'name' => 'required|max:255',
        'description' => 'required',
        'price' => 'required',
        'image' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
    ]);

    // Store image
    $image = $request->file('image');
    $imageName = time() . '.' . $image->getClientOriginalExtension();
    $image->move(public_path('images'), $imageName);

    // Create new product
    $product = new Product;
    $product->name = $validated['name'];
    $product->description = $validated['description'];
    $product->price = $validated['price'];
    $product->image = $imageName;
    $product->save();

    return redirect()->route('products.index')
                     ->with('success','Product created successfully.');
}












public function show(Product $product)
{
    return view('products.show', compact('product'));
}






<img src="{{ asset('images/'.$product->image) }}" alt="{{ $product->name }}" width="200">







public function update(Request $request, Product $product)
{
    // Validate request data
    $validated = $request->validate([
        'name' => 'required|max:255',
        'description' => 'required',
        'price' => 'required',
        'image' => 'image|mimes:jpeg,png,jpg,gif,svg|max:2048',
    ]);

    if ($request->hasFile('image')) {
        // Store new image
        $image = $request->file('image');
        $imageName = time() . '.' . $image->getClientOriginalExtension();
        $image->move(public_path('images'), $imageName);

        // Delete old image
        File::delete(public_path('images/'.$product->image));

        // Update product's image
        $product->image = $imageName;
    }

    // Update other product data
    $product->name = $validated['name'];
    $product->description = $validated['description'];
    $product->price = $validated['price'];
    $product->save();

    return redirect()->route('products.index')
                     ->with('success','Product updated successfully.');
}






public function destroy(Product $product)
{
    // Delete product's image
    File::delete(public_path('images/'.$product->image));

    // Delete product
    $product->delete();

    return redirect()->route('products.index')
                     ->with('success','Product deleted successfully.');
}

